'use client';

import { useState } from 'react';
import DemoVectorGrid from './DemoVectorGrid';
import LengthDynamicsHelp from './LengthDynamicsHelp';

type AnimationType = 'static' | 'rotation' | 'wave' | 'spiral' | 'dipole' | 'vortex' | 'turbulence';
type GridPattern = 'regular' | 'hexagonal' | 'fibonacci' | 'radial' | 'staggered' | 'triangular' | 'voronoi' | 'golden';

interface PresetConfig {
  name: string;
  gridSize: number;
  gridPattern: GridPattern;
  animation: AnimationType;
  speed: number;
  intensity: number;
  color: string;
  colorMode: 'solid' | 'gradient' | 'hsl-rainbow' | 'hsl-flow' | 'hsl-pulse' | 'hsl-subtle' | 'gradient-sunset' | 'gradient-ocean' | 'gradient-cosmic'; // Legacy support
  gradientType?: 'flow' | 'rainbow' | 'cosmic' | 'pulse' | 'subtle' | 'sunset' | 'ocean';
  // Length Dynamics
  lengthMin: number;
  lengthMax: number;
  oscillationFreq: number;
  oscillationAmp: number;
  pulseSpeed: number;
  spatialFactor: number;
  spatialMode: 'edge' | 'center' | 'mixed';
  mouseInfluence: number;
  mouseMode: 'attract' | 'repel' | 'stretch';
  physicsMode: 'none' | 'velocity' | 'pressure' | 'field';
  // Vector Shape System
  vectorShape: 'straight' | 'wave' | 'bezier' | 'spiral' | 'arc' | 'organic';
  showArrowheads: boolean;
  curvatureIntensity: number;
  waveFrequency: number;
  spiralTightness: number;
  organicNoise: number;
  // Smart Presets System
  useSmartPresets: boolean;
}

const PRESETS: PresetConfig[] = [
  { 
    name: 'Gentle Waves', gridSize: 16, gridPattern: 'regular', animation: 'wave', speed: 0.5, intensity: 0.3, color: '#3b82f6', colorMode: 'solid',
    lengthMin: 10, lengthMax: 25, oscillationFreq: 1, oscillationAmp: 0.3, pulseSpeed: 1, spatialFactor: 0.2, spatialMode: 'edge', mouseInfluence: 0, mouseMode: 'attract', physicsMode: 'none',
    vectorShape: 'straight', showArrowheads: true, curvatureIntensity: 1, waveFrequency: 2, spiralTightness: 1, organicNoise: 0.5, useSmartPresets: false, gradientType: undefined
  },
  { 
    name: 'Electromagnetic Field', gridSize: 25, gridPattern: 'regular', animation: 'dipole', speed: 1, intensity: 0.8, color: '#ef4444', colorMode: 'hsl-flow',
    lengthMin: 5, lengthMax: 40, oscillationFreq: 2, oscillationAmp: 0.6, pulseSpeed: 1.5, spatialFactor: 0.8, spatialMode: 'center', mouseInfluence: 0.3, mouseMode: 'stretch', physicsMode: 'field',
    vectorShape: 'straight', showArrowheads: true, curvatureIntensity: 1, waveFrequency: 2, spiralTightness: 1, organicNoise: 0.5, useSmartPresets: false, gradientType: undefined
  },
  { 
    name: 'Vortex Flow', gridSize: 36, gridPattern: 'hexagonal', animation: 'vortex', speed: 1.5, intensity: 0.6, color: '#8b5cf6', colorMode: 'hsl-rainbow',
    lengthMin: 8, lengthMax: 35, oscillationFreq: 1.5, oscillationAmp: 0.4, pulseSpeed: 2, spatialFactor: 0.5, spatialMode: 'mixed', mouseInfluence: 0.5, mouseMode: 'repel', physicsMode: 'velocity',
    vectorShape: 'bezier', showArrowheads: false, curvatureIntensity: 1.2, waveFrequency: 2, spiralTightness: 1, organicNoise: 0.5, useSmartPresets: false, gradientType: undefined
  },
  { 
    name: 'Fibonacci Spiral', gridSize: 49, gridPattern: 'fibonacci', animation: 'spiral', speed: 0.8, intensity: 0.7, color: '#f59e0b', colorMode: 'hsl-rainbow',
    lengthMin: 12, lengthMax: 30, oscillationFreq: 0.8, oscillationAmp: 0.2, pulseSpeed: 0.8, spatialFactor: 0.3, spatialMode: 'edge', mouseInfluence: 0.2, mouseMode: 'attract', physicsMode: 'none',
    vectorShape: 'spiral', showArrowheads: false, curvatureIntensity: 1, waveFrequency: 2, spiralTightness: 1.5, organicNoise: 0.5, useSmartPresets: false, gradientType: undefined
  },
  { 
    name: 'Turbulent Field', gridSize: 64, gridPattern: 'voronoi', animation: 'turbulence', speed: 2, intensity: 0.9, color: '#10b981', colorMode: 'gradient-cosmic',
    lengthMin: 5, lengthMax: 45, oscillationFreq: 3, oscillationAmp: 0.8, pulseSpeed: 2.5, spatialFactor: 1, spatialMode: 'mixed', mouseInfluence: 0.7, mouseMode: 'stretch', physicsMode: 'pressure',
    vectorShape: 'organic', showArrowheads: false, curvatureIntensity: 1.5, waveFrequency: 2, spiralTightness: 1, organicNoise: 1.2, useSmartPresets: false, gradientType: undefined
  },
  { 
    name: 'EXTREME TEST', gridSize: 5000, gridPattern: 'regular', animation: 'dipole', speed: 3, intensity: 1, color: '#dc2626', colorMode: 'hsl-pulse',
    lengthMin: 3, lengthMax: 50, oscillationFreq: 5, oscillationAmp: 1, pulseSpeed: 3, spatialFactor: 0.6, spatialMode: 'center', mouseInfluence: 0.1, mouseMode: 'attract', physicsMode: 'field',
    vectorShape: 'wave', showArrowheads: false, curvatureIntensity: 0.8, waveFrequency: 3, spiralTightness: 1, organicNoise: 0.5, useSmartPresets: false, gradientType: undefined
  },
];

export default function DevPage() {
  const [config, setConfig] = useState<PresetConfig>({
    name: 'Custom', gridSize: 25, gridPattern: 'regular', animation: 'wave', speed: 1, intensity: 0.5, color: '#3b82f6', colorMode: 'solid',
    lengthMin: 10, lengthMax: 25, oscillationFreq: 1, oscillationAmp: 0.3, pulseSpeed: 1, spatialFactor: 0.2, spatialMode: 'edge', mouseInfluence: 0, mouseMode: 'attract', physicsMode: 'none',
    vectorShape: 'straight', showArrowheads: true, curvatureIntensity: 1, waveFrequency: 2, spiralTightness: 1, organicNoise: 0.5, useSmartPresets: true, gradientType: undefined
  });
  const [showLengthHelp, setShowLengthHelp] = useState(false);

  // Animation-specific Length Dynamics presets
  const ANIMATION_LD_PRESETS: Record<string, Partial<PresetConfig>> = {
    'static': {
      oscillationFreq: 0.5, oscillationAmp: 0.2, physicsMode: 'none', spatialMode: 'edge',
      vectorShape: 'straight', showArrowheads: true
    },
    'rotation': {
      oscillationFreq: 1, oscillationAmp: 0.3, physicsMode: 'none', spatialMode: 'center',
      vectorShape: 'straight', showArrowheads: true
    },
    'wave': {
      oscillationFreq: 2, oscillationAmp: 0.6, physicsMode: 'velocity', spatialMode: 'mixed',
      vectorShape: 'bezier', showArrowheads: false, curvatureIntensity: 1.2, waveFrequency: 1.5,
      colorMode: 'gradient', gradientType: 'flow'
    },
    'spiral': {
      oscillationFreq: 1.5, oscillationAmp: 0.4, physicsMode: 'field', spatialMode: 'center',
      vectorShape: 'spiral', showArrowheads: false, spiralTightness: 1.8, curvatureIntensity: 1.1
    },
    'dipole': {
      oscillationFreq: 2.5, oscillationAmp: 0.7, physicsMode: 'field', spatialMode: 'center',
      vectorShape: 'arc', showArrowheads: false, curvatureIntensity: 1.3, mouseMode: 'stretch',
      colorMode: 'gradient', gradientType: 'cosmic'
    },
    'vortex': {
      oscillationFreq: 3, oscillationAmp: 0.8, physicsMode: 'velocity', spatialMode: 'mixed',
      vectorShape: 'bezier', showArrowheads: false, curvatureIntensity: 1.5, mouseMode: 'repel',
      colorMode: 'gradient', gradientType: 'rainbow'
    },
    'turbulence': {
      oscillationFreq: 4, oscillationAmp: 1, physicsMode: 'pressure', spatialMode: 'mixed',
      vectorShape: 'organic', showArrowheads: false, organicNoise: 1.3, curvatureIntensity: 1.6,
      colorMode: 'gradient', gradientType: 'pulse'
    }
  };

  // Color mode migration helper
  const normalizeColorMode = (config: PresetConfig): PresetConfig => {
    // Migrate legacy color modes to new system
    const colorModeMap: Record<string, { colorMode: 'solid' | 'gradient', gradientType?: string }> = {
      'hsl-flow': { colorMode: 'gradient', gradientType: 'flow' },
      'hsl-rainbow': { colorMode: 'gradient', gradientType: 'rainbow' },
      'hsl-pulse': { colorMode: 'gradient', gradientType: 'pulse' },
      'hsl-subtle': { colorMode: 'gradient', gradientType: 'subtle' },
      'gradient-sunset': { colorMode: 'gradient', gradientType: 'sunset' },
      'gradient-ocean': { colorMode: 'gradient', gradientType: 'ocean' },
      'gradient-cosmic': { colorMode: 'gradient', gradientType: 'cosmic' },
      'solid': { colorMode: 'solid' }
    };

    const mapping = colorModeMap[config.colorMode];
    if (mapping && mapping.colorMode === 'gradient') {
      return { 
        ...config, 
        colorMode: 'gradient',
        gradientType: mapping.gradientType as any
      };
    }
    
    return { ...config, colorMode: 'solid' };
  };

  // Smart preset application logic
  const applySmartPreset = (animation: string, config: PresetConfig): PresetConfig => {
    if (!config.useSmartPresets || !ANIMATION_LD_PRESETS[animation]) {
      return normalizeColorMode(config);
    }
    
    const smartSettings = ANIMATION_LD_PRESETS[animation];
    return normalizeColorMode({ ...config, ...smartSettings });
  };

  const currentConfig = applySmartPreset(config.animation, config);

  const exportSVG = () => {
    console.log('Exporting SVG...', currentConfig);
  };

  const exportAnimatedSVG = () => {
    console.log('Exporting Animated SVG...', currentConfig);
  };

  return (
    <div className="min-h-screen bg-gray-950 text-gray-100">
      <div className="flex h-screen">
        {/* Left Column - Animation Controls & Presets */}
        <div className="w-[15%] bg-gray-900/80 backdrop-blur-sm border-r border-gray-700/50 overflow-y-auto">
          <div className="p-4">
            <h1 className="text-lg font-bold mb-6 text-blue-400">Animation Hub</h1>
            
            {/* Animation Controls */}
            <div>
              <h2 className="text-lg font-semibold mb-4 text-gray-300">Animation Type</h2>
              <select
                value={config.animation}
                onChange={(e) => setConfig({...config, animation: e.target.value as AnimationType})}
                className="w-full bg-gray-800/70 border border-gray-600/50 rounded-lg px-3 py-2 text-gray-100"
              >
                <option value="static">Static</option>
                <option value="rotation">Rotation</option>
                <option value="wave">Wave</option>
                <option value="spiral">Spiral</option>
                <option value="dipole">Dipole Field</option>
                <option value="vortex">Vortex Flow</option>
                <option value="turbulence">Turbulence</option>
              </select>

              <div className="mt-4 space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-300">Speed: {config.speed}</label>
                  <input
                    type="range"
                    min="0.1"
                    max="5"
                    step="0.1"
                    value={config.speed}
                    onChange={(e) => setConfig({...config, speed: parseFloat(e.target.value)})}
                    className="w-full accent-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-300">Intensity: {config.intensity}</label>
                  <input
                    type="range"
                    min="0"
                    max="1"
                    step="0.1"
                    value={config.intensity}
                    onChange={(e) => setConfig({...config, intensity: parseFloat(e.target.value)})}
                    className="w-full accent-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-300">Color</label>
                  <input
                    type="color"
                    value={config.color}
                    onChange={(e) => setConfig({...config, color: e.target.value})}
                    className="w-full h-10 bg-gray-800/70 border border-gray-600/50 rounded-lg"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-300">Color Effect</label>
                  <select
                    value={currentConfig.colorMode === 'solid' ? 'solid' : currentConfig.gradientType || 'flow'}
                    onChange={(e) => {
                      const value = e.target.value;
                      if (value === 'solid') {
                        setConfig({...config, colorMode: 'solid', gradientType: undefined});
                      } else {
                        setConfig({...config, colorMode: 'gradient', gradientType: value as any});
                      }
                    }}
                    className="w-full bg-gray-800/70 border border-gray-600/50 rounded-lg px-3 py-2 text-gray-100"
                  >
                    <option value="solid">🎨 Solid</option>
                    <option value="flow">🌊 Flow</option>
                    <option value="rainbow">🌈 Rainbow</option>
                    <option value="cosmic">🌌 Cosmic</option>
                    <option value="pulse">💓 Pulse</option>
                    <option value="subtle">✨ Subtle</option>
                    <option value="sunset">🌅 Sunset</option>
                    <option value="ocean">🌊 Ocean</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Center Column - Main Visualization (70% width) */}
        <div className="w-[70%] bg-black border-x border-gray-700/50">
          <DemoVectorGrid 
            gridSize={currentConfig.gridSize}
            gridPattern={currentConfig.gridPattern}
            animation={currentConfig.animation}
            speed={currentConfig.speed}
            intensity={currentConfig.intensity}
            color={currentConfig.color}
            colorMode={currentConfig.colorMode}
            lengthMin={currentConfig.lengthMin}
            lengthMax={currentConfig.lengthMax}
            oscillationFreq={currentConfig.oscillationFreq}
            oscillationAmp={currentConfig.oscillationAmp}
            pulseSpeed={currentConfig.pulseSpeed}
            spatialFactor={currentConfig.spatialFactor}
            spatialMode={currentConfig.spatialMode}
            mouseInfluence={currentConfig.mouseInfluence}
            mouseMode={currentConfig.mouseMode}
            physicsMode={currentConfig.physicsMode}
            vectorShape={currentConfig.vectorShape}
            showArrowheads={currentConfig.showArrowheads}
            curvatureIntensity={currentConfig.curvatureIntensity}
            waveFrequency={currentConfig.waveFrequency}
            spiralTightness={currentConfig.spiralTightness}
            organicNoise={currentConfig.organicNoise}
            useSmartPresets={currentConfig.useSmartPresets}
            gradientType={currentConfig.gradientType}
          />
        </div>

        {/* Right Column - Grid Controls & Export */}
        <div className="w-[15%] bg-gray-900/80 backdrop-blur-sm overflow-y-auto">
          <div className="p-4">
            <h1 className="text-lg font-bold mb-6 text-green-400">Grid Control</h1>
            

            
            {/* Grid Configuration */}
            <div className="mb-8 space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2 text-gray-300">Grid Size</label>
                <select
                  value={config.gridSize}
                  onChange={(e) => setConfig({...config, gridSize: parseInt(e.target.value)})}
                  className="w-full bg-gray-800/70 border border-gray-600/50 rounded-lg px-3 py-2 text-gray-100"
                >
                  <option value={16}>16 (4×4) - Smooth</option>
                  <option value={25}>25 (5×5) - Smooth</option>
                  <option value={36}>36 (6×6) - Smooth</option>
                  <option value={49}>49 (7×7) - Smooth</option>
                  <option value={64}>64 (8×8) - Good</option>
                  <option value={100}>100 (10×10) - Good</option>
                  <option value={400}>400 (20×20) - Medium</option>
                  <option value={900}>900 (30×30) - Heavy</option>
                  <option value={2500}>2500 (50×50) - Extreme</option>
                  <option value={10000}>10000 (100×100) - APOCALYPSE</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2 text-gray-300">Grid Pattern</label>
                <select
                  value={config.gridPattern}
                  onChange={(e) => setConfig({...config, gridPattern: e.target.value as GridPattern})}
                  className="w-full bg-gray-800/70 border border-gray-600/50 rounded-lg px-3 py-2 text-gray-100"
                >
                  <option value="regular">Regular Grid</option>
                  <option value="hexagonal">Hexagonal</option>
                  <option value="fibonacci">Fibonacci Spiral</option>
                  <option value="radial">Radial Circles</option>
                  <option value="staggered">Staggered Rows</option>
                  <option value="triangular">Triangular</option>
                  <option value="voronoi">Voronoi Random</option>
                  <option value="golden">Golden Ratio</option>
                </select>
              </div>
            </div>

            {/* Length Dynamics Section */}
            <div className="mb-6">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-2">
                  <h2 className="text-sm font-semibold text-purple-400">🎛️ Length Dynamics</h2>
                  {config.useSmartPresets && (
                    <span className="text-xs text-purple-300/70">Auto-configured</span>
                  )}
                </div>
                <button
                  onClick={() => setShowLengthHelp(true)}
                  className="w-5 h-5 bg-purple-500/20 hover:bg-purple-500/40 text-purple-400 rounded-full flex items-center justify-center text-xs transition-colors"
                  title="Show Length Dynamics Help"
                >
                  ?
                </button>
              </div>
              
              <div className="space-y-3">
                {/* Base Length Range */}
                <div className="space-y-2">
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Min: {config.lengthMin}</label>
                    <input
                      type="range"
                      min="1"
                      max="20"
                      value={config.lengthMin}
                      onChange={(e) => setCustomConfig({...config, lengthMin: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Max: {config.lengthMax}</label>
                    <input
                      type="range"
                      min="20"
                      max="80"
                      value={config.lengthMax}
                      onChange={(e) => setCustomConfig({...config, lengthMax: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-purple-500"
                    />
                  </div>
                </div>

                {/* Oscillation */}
                <div className="space-y-2">
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Osc Freq: {config.oscillationFreq}</label>
                    <input
                      type="range"
                      min="0.1"
                      max="5"
                      step="0.1"
                      value={config.oscillationFreq}
                      onChange={(e) => setCustomConfig({...config, oscillationFreq: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Osc Amp: {config.oscillationAmp}</label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={config.oscillationAmp}
                      onChange={(e) => setCustomConfig({...config, oscillationAmp: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-purple-500"
                    />
                  </div>
                </div>

                {/* Advanced */}
                <div className="space-y-2">
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Pulse: {config.pulseSpeed}</label>
                    <input
                      type="range"
                      min="0.1"
                      max="5"
                      step="0.1"
                      value={config.pulseSpeed}
                      onChange={(e) => setCustomConfig({...config, pulseSpeed: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-purple-500"
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Spatial: {config.spatialFactor}</label>
                    <input
                      type="range"
                      min="0"
                      max="2"
                      step="0.1"
                      value={config.spatialFactor}
                      onChange={(e) => setCustomConfig({...config, spatialFactor: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-purple-500"
                    />
                    <select
                      value={config.spatialMode}
                      onChange={(e) => setCustomConfig({...config, spatialMode: e.target.value as any})}
                      className="w-full mt-1 bg-gray-800/70 border border-gray-600/50 rounded px-2 py-1 text-xs text-gray-100"
                    >
                      <option value="edge">Edge Longer</option>
                      <option value="center">Center Longer</option>
                      <option value="mixed">Mixed Pattern</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Mouse: {config.mouseInfluence}</label>
                    <input
                      type="range"
                      min="0"
                      max="1"
                      step="0.1"
                      value={config.mouseInfluence}
                      onChange={(e) => setCustomConfig({...config, mouseInfluence: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-purple-500"
                    />
                    <select
                      value={config.mouseMode}
                      onChange={(e) => setCustomConfig({...config, mouseMode: e.target.value as any})}
                      className="w-full mt-1 bg-gray-800/70 border border-gray-600/50 rounded px-2 py-1 text-xs text-gray-100"
                    >
                      <option value="attract">Attract (Grow Near)</option>
                      <option value="repel">Repel (Shrink Near)</option>
                      <option value="stretch">Stretch (Dynamic)</option>
                    </select>
                  </div>
                </div>

                {/* Physics Mode */}
                <div>
                  <label className="block text-xs font-medium mb-1 text-gray-300">Physics</label>
                  <select
                    value={config.physicsMode}
                    onChange={(e) => setCustomConfig({...config, physicsMode: e.target.value as any})}
                    className="w-full bg-gray-800/70 border border-gray-600/50 rounded px-2 py-1 text-xs text-gray-100"
                  >
                    <option value="none">None</option>
                    <option value="velocity">Velocity</option>
                    <option value="pressure">Pressure</option>
                    <option value="field">Field</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Smart Presets Toggle */}
            <div className={`mb-6 ${useCustom ? 'opacity-100' : 'opacity-50 pointer-events-none'}`}>
              <div className="flex items-center space-x-2 mb-3">
                <input
                  type="checkbox"
                  id="useSmartPresets"
                  checked={config.useSmartPresets}
                  onChange={(e) => setCustomConfig({...config, useSmartPresets: e.target.checked})}
                  className="w-4 h-4 accent-blue-500"
                />
                <label htmlFor="useSmartPresets" className="text-sm font-medium text-blue-400">
                  🧠 Smart Animation Presets
                </label>
              </div>
              {config.useSmartPresets && (
                <div className="text-xs text-blue-300/70 mb-3">
                  Automatically optimizes Length Dynamics & Vector Shapes based on selected animation type.
                </div>
              )}
            </div>

            {/* Vector Shape Section */}
            <div className={`mb-6 ${useCustom ? 'opacity-100' : 'opacity-50 pointer-events-none'}`}>
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-sm font-semibold text-green-400">🌊 Vector Shapes</h2>
                {config.useSmartPresets && (
                  <span className="text-xs text-green-300/70">Auto-configured</span>
                )}
              </div>
              
              <div className="space-y-3">
                {/* Vector Shape Selector */}
                <div>
                  <label className="block text-xs font-medium mb-1 text-gray-300">Shape</label>
                  <select
                    value={config.vectorShape}
                    onChange={(e) => setCustomConfig({...config, vectorShape: e.target.value as any})}
                    className="w-full bg-gray-800/70 border border-gray-600/50 rounded px-2 py-1 text-xs text-gray-100"
                  >
                    <option value="straight">Straight Lines</option>
                    <option value="wave">Wave Serpentine</option>
                    <option value="bezier">Smooth Curves</option>
                    <option value="spiral">Spiral Coils</option>
                    <option value="arc">Simple Arcs</option>
                    <option value="organic">Organic Forms</option>
                  </select>
                </div>

                {/* Arrowheads Toggle */}
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="showArrowheads"
                    checked={config.showArrowheads}
                    onChange={(e) => setCustomConfig({...config, showArrowheads: e.target.checked})}
                    className="w-3 h-3 accent-green-500"
                  />
                  <label htmlFor="showArrowheads" className="text-xs text-gray-300">Show Arrowheads</label>
                </div>

                {/* Curvature Intensity */}
                <div>
                  <label className="block text-xs font-medium mb-1 text-gray-300">Intensity: {config.curvatureIntensity}</label>
                  <input
                    type="range"
                    min="0.1"
                    max="3"
                    step="0.1"
                    value={config.curvatureIntensity}
                    onChange={(e) => setCustomConfig({...config, curvatureIntensity: parseFloat(e.target.value)})}
                    className="w-full h-1 accent-green-500"
                  />
                </div>

                {/* Shape-specific controls */}
                {config.vectorShape === 'wave' && (
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Wave Freq: {config.waveFrequency}</label>
                    <input
                      type="range"
                      min="0.5"
                      max="5"
                      step="0.1"
                      value={config.waveFrequency}
                      onChange={(e) => setCustomConfig({...config, waveFrequency: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-green-500"
                    />
                  </div>
                )}

                {config.vectorShape === 'spiral' && (
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Tightness: {config.spiralTightness}</label>
                    <input
                      type="range"
                      min="0.1"
                      max="3"
                      step="0.1"
                      value={config.spiralTightness}
                      onChange={(e) => setCustomConfig({...config, spiralTightness: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-green-500"
                    />
                  </div>
                )}

                {config.vectorShape === 'organic' && (
                  <div>
                    <label className="block text-xs font-medium mb-1 text-gray-300">Noise: {config.organicNoise}</label>
                    <input
                      type="range"
                      min="0"
                      max="2"
                      step="0.1"
                      value={config.organicNoise}
                      onChange={(e) => setCustomConfig({...config, organicNoise: parseFloat(e.target.value)})}
                      className="w-full h-1 accent-green-500"
                    />
                  </div>
                )}
              </div>
            </div>

            {/* Export Section */}
            <div>
              <h2 className="text-sm font-semibold mb-3 text-orange-400">Export Tools</h2>
              <div className="space-y-2">
                <button
                  onClick={exportSVG}
                  className="w-full bg-blue-600/30 hover:bg-blue-600/50 border border-blue-500/50 px-3 py-2 rounded-lg transition-all duration-200 text-sm font-medium"
                >
                  Static SVG
                </button>
                <button
                  onClick={exportAnimatedSVG}
                  className="w-full bg-purple-600/30 hover:bg-purple-600/50 border border-purple-500/50 px-3 py-2 rounded-lg transition-all duration-200 text-sm font-medium"
                >
                  Animated SVG
                </button>
                <div className="pt-1 text-xs text-gray-500 space-y-1">
                  <p>• Static: Current frame</p>
                  <p>• Animated: SMIL loops</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Length Dynamics Help Modal */}
      <LengthDynamicsHelp 
        isOpen={showLengthHelp}
        onClose={() => setShowLengthHelp(false)}
      />
    </div>
  );
}