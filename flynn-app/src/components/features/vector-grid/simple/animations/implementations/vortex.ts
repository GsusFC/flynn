// Animaci√≥n "vortex" - V√≥rtice giratorio
import { createSimpleAnimation } from '../base/AnimationBase';
import type { SimpleVector } from '../../simpleTypes';
import type { AnimationContext } from '../types';
import { normalizeAngle, distance, angleBetweenPoints } from '../base/utils';

// Props para la animaci√≥n vortex
interface VortexProps {
  strength: number;
  radiusFalloff: number;
  swirlDirection: 'clockwise' | 'counterClockwise';
  useMouseAsCenter: boolean;
  vortexCenterX?: number;
  vortexCenterY?: number;
}

// Funci√≥n de animaci√≥n que crea un v√≥rtice
const animateVortex = (
  vectors: SimpleVector[],
  props: VortexProps,
  context: AnimationContext
): SimpleVector[] => {
  // Determinar el centro del v√≥rtice
  let centerX: number, centerY: number;
  
  if (props.useMouseAsCenter && context.mousePosition.x !== null && context.mousePosition.y !== null) {
    centerX = context.mousePosition.x;
    centerY = context.mousePosition.y;
  } else if (props.vortexCenterX !== undefined && props.vortexCenterY !== undefined) {
    centerX = props.vortexCenterX;
    centerY = props.vortexCenterY;
  } else {
    centerX = context.canvasWidth / 2;
    centerY = context.canvasHeight / 2;
  }

  return vectors.map(vector => {
    // Calcular distancia al centro del v√≥rtice
    const dist = distance(vector.x, vector.y, centerX, centerY);
    
    // Si est√° muy lejos, no aplicar efecto
    if (dist > 400) {
      return {
        ...vector,
        angle: vector.originalAngle
      };
    }

    // Calcular influencia basada en la distancia con falloff
    const maxDistance = 300;
    const normalizedDistance = Math.min(dist / maxDistance, 1);
    const falloffInfluence = Math.pow(1 - normalizedDistance, props.radiusFalloff);
    
    // Calcular √°ngulo tangencial (perpendicular al radio)
    const radialAngle = angleBetweenPoints(centerX, centerY, vector.x, vector.y);
    const tangentialAngle = props.swirlDirection === 'clockwise' 
      ? radialAngle + 90 
      : radialAngle - 90;
    
    // Aplicar rotaci√≥n basada en el tiempo y la fuerza
    const timeRotation = context.time * props.strength * 0.1;
    const finalTangentialAngle = tangentialAngle + timeRotation;
    
    // Interpolar entre el √°ngulo original y el tangencial
    const influence = falloffInfluence * props.strength * 10;
    const angleDiff = finalTangentialAngle - vector.originalAngle;
    const normalizedDiff = ((angleDiff + 180) % 360) - 180;
    const finalAngle = vector.originalAngle + (normalizedDiff * influence);

    return {
      ...vector,
      angle: normalizeAngle(finalAngle)
    };
  });
};

// Validaci√≥n de props
const validateVortexProps = (props: VortexProps): boolean => {
  if (typeof props.strength !== 'number' || props.strength <= 0) {
    console.warn('[vortex] La fuerza debe ser un n√∫mero positivo');
    return false;
  }
  if (typeof props.radiusFalloff !== 'number' || props.radiusFalloff <= 0) {
    console.warn('[vortex] El falloff del radio debe ser un n√∫mero positivo');
    return false;
  }
  if (!['clockwise', 'counterClockwise'].includes(props.swirlDirection)) {
    console.warn('[vortex] La direcci√≥n debe ser clockwise o counterClockwise');
    return false;
  }
  return true;
};

// Exportar la animaci√≥n vortex
export const vortexAnimation = createSimpleAnimation<VortexProps>({
  id: 'vortex',
  name: 'V√≥rtice',
  description: 'Los vectores giran alrededor de un punto central formando un v√≥rtice',
  category: 'flow',
  icon: 'üå™Ô∏è',
  controls: [
    {
      id: 'strength',
      label: 'Fuerza',
      type: 'slider',
      min: 0.01,
      max: 0.2,
      step: 0.01,
      defaultValue: 0.05,
      description: 'Influencia o velocidad de la rotaci√≥n (0.01-0.2)',
      icon: 'üí™'
    },
    {
      id: 'radiusFalloff',
      label: 'Falloff del radio',
      type: 'slider',
      min: 0.5,
      max: 3.0,
      step: 0.1,
      defaultValue: 1.0,
      description: 'C√≥mo disminuye la fuerza con la distancia (0.5-3.0)',
      icon: 'üìâ'
    },
    {
      id: 'swirlDirection',
      label: 'Direcci√≥n',
      type: 'select',
      options: [
        { value: 'clockwise', label: 'Horario' },
        { value: 'counterClockwise', label: 'Antihorario' }
      ],
      defaultValue: 'clockwise',
      description: 'Direcci√≥n de rotaci√≥n del v√≥rtice',
      icon: 'üîÑ'
    },
    {
      id: 'useMouseAsCenter',
      label: 'Seguir rat√≥n',
      type: 'toggle',
      defaultValue: false,
      description: 'Si es true, el v√≥rtice sigue al rat√≥n',
      icon: 'üñ±Ô∏è'
    }
  ],
  defaultProps: {
    strength: 0.05,
    radiusFalloff: 1.0,
    swirlDirection: 'clockwise',
    useMouseAsCenter: false
  },
  animate: animateVortex,
  validateProps: validateVortexProps
});
